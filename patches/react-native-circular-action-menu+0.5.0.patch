diff --git a/node_modules/react-native-circular-action-menu/ActionButton.js b/node_modules/react-native-circular-action-menu/ActionButton.js
index eb64e59..5e1f49d 100644
--- a/node_modules/react-native-circular-action-menu/ActionButton.js
+++ b/node_modules/react-native-circular-action-menu/ActionButton.js
@@ -56,7 +56,7 @@ export default class ActionButton extends Component {
   }
 
   getActionContainerStyle() {
-    const {alignItems, justifyContent} = alignMap[this.props.position];
+    const { alignItems, justifyContent } = alignMap[this.props.position];
     return [styles.overlay, styles.actionContainer, {
       alignItems,
       justifyContent,
@@ -108,11 +108,11 @@ export default class ActionButton extends Component {
           activeOpacity={0.85}
           onLongPress={this.props.onLongPress}
           onPress={() => {
-              this.props.onPress();
-              if (this.props.children) {
-                this.animateButton();
-              }
-            }}
+            this.props.onPress();
+            if (this.props.children) {
+              this.animateButton();
+            }
+          }}
         >
           <Animated.View
             style={
@@ -122,10 +122,10 @@ export default class ActionButton extends Component {
                   width: this.props.size,
                   height: this.props.size,
                   borderRadius: this.props.size / 2,
-                  backgroundColor: this.state.anim.interpolate({
-                    inputRange: [0, 1],
-                    outputRange: [this.props.buttonColor, this.props.btnOutRange]
-                  }),
+                  // backgroundColor: this.state.anim.interpolate({
+                  //   inputRange: [0, 0],
+                  //   outputRange: [this.props.buttonColor, this.props.btnOutRange]
+                  // }),
                   transform: [
                     {
                       scale: this.state.anim.interpolate({
@@ -155,12 +155,12 @@ export default class ActionButton extends Component {
     return (
       <Animated.Text
         style={[styles.btnText,
-                {
-                  color: this.state.anim.interpolate({
-                    inputRange: [0, 1],
-                    outputRange: [this.props.buttonTextColor, this.props.btnOutRangeTxt]
-                  })
-                }]}>
+        {
+          color: this.state.anim.interpolate({
+            inputRange: [0, 1],
+            outputRange: [this.props.buttonTextColor, this.props.btnOutRangeTxt]
+          })
+        }]}>
         +
       </Animated.Text>
     );
@@ -196,14 +196,14 @@ export default class ActionButton extends Component {
               angle={startRadian + index * offset}
               btnColor={this.props.btnOutRange}
               {...button.props}
-              onPress={() =>Â {
-                  if (this.props.autoInactive) {
-                    this.timeout = setTimeout(() => {
-                      this.reset();
-                    }, 200);
-                  }
-                  button.props.onPress();
-                }}
+              onPress={() => {
+                if (this.props.autoInactive) {
+                  this.timeout = setTimeout(() => {
+                    this.reset();
+                  }, 200);
+                }
+                button.props.onPress();
+              }}
             />
           </View>
         );
@@ -218,7 +218,7 @@ export default class ActionButton extends Component {
       backdrop = (
         <TouchableWithoutFeedback
           style={styles.overlay}
-          onPress={() => {this.reset(); this.props.onOverlayPress()}}
+          onPress={() => { this.reset(); this.props.onOverlayPress() }}
         >
           <Animated.View
             style={
@@ -227,7 +227,7 @@ export default class ActionButton extends Component {
                 opacity: this.state.anim,
                 flex: 1,
               }
-                  }
+            }
           >
             {this.props.backdrop}
           </Animated.View>
@@ -273,6 +273,7 @@ ActionButton.propTypes = {
   endDegree: PropTypes.number,
   radius: PropTypes.number,
   children: PropTypes.node,
+  btnNumber: PropTypes.number,
   position: PropTypes.oneOf(['left', 'center', 'right']),
 };
 
@@ -284,8 +285,8 @@ ActionButton.defaultProps = {
   position: 'center',
   outRangeScale: 1,
   autoInactive: true,
-  onPress: () => {},
-  onOverlayPress: () => {},
+  onPress: () => { },
+  onOverlayPress: () => { },
   backdrop: false,
   degrees: 135,
   size: 63,
diff --git a/node_modules/react-native-circular-action-menu/ActionButtonItem.js b/node_modules/react-native-circular-action-menu/ActionButtonItem.js
index a0b2715..b297ee6 100644
--- a/node_modules/react-native-circular-action-menu/ActionButtonItem.js
+++ b/node_modules/react-native-circular-action-menu/ActionButtonItem.js
@@ -6,8 +6,13 @@ import {
   View,
   Animated,
   TouchableOpacity,
+  Text
 } from 'react-native';
 import PropTypes from 'prop-types';
+import { RFPercentage, RFValue } from "react-native-responsive-fontsize";
+import Stringsoflanguages from "../../src/Localization/stringsoflanguages";
+import { Style } from '../../src/common/Style';
+import * as colors from '../../src/common/colors'
 
 export default class ActionButtonItem extends Component {
 
@@ -25,28 +30,38 @@ export default class ActionButtonItem extends Component {
               translateY: this.props.anim.interpolate({
                 inputRange: [0, 1],
                 outputRange: [0, offsetY],
-              }) },
+              })
+            },
             {
               translateX: this.props.anim.interpolate({
                 inputRange: [0, 1],
                 outputRange: [0, offsetX],
-              }) },
+              })
+            },
             {
               rotate: this.props.anim.interpolate({
                 inputRange: [0, 1],
                 outputRange: [`${this.props.startDegree}deg`, `${this.props.endDegree}deg`],
-              }) },
+              })
+            },
             {
               scale: this.props.anim.interpolate({
                 inputRange: [0, 1],
                 outputRange: [0, 1],
-              }) },
+              })
+            },
           ]
         }]}
       >
-        <TouchableOpacity style={{flex:1}} activeOpacity={this.props.activeOpacity || 0.85} onPress={this.props.onPress}>
+        <TouchableOpacity style={[styles.actionButton, {
+          width: this.props.size,
+          height: this.props.size,
+          borderRadius: this.props.size / 2,
+          backgroundColor: this.props.buttonColor,
+          bottom: this.props.btnNumber == 2 ? RFPercentage(10) : RFPercentage(10)
+        }]} activeOpacity={this.props.activeOpacity || 0.85} onPress={this.props.onPress}>
           <View
-            style={[styles.actionButton,{
+            style={[styles.actionButton, {
               width: this.props.size,
               height: this.props.size,
               borderRadius: this.props.size / 2,
@@ -55,6 +70,13 @@ export default class ActionButtonItem extends Component {
           >
             {this.props.children}
           </View>
+          <Text style={[Style.FontRegular_12, {
+            color: colors.Black,
+            position: 'absolute',
+            bottom: RFPercentage(-3)
+          }]}>
+            {this.props.btnNumber == 1 ? Stringsoflanguages.PassiveMode : this.props.btnNumber == 2 ? Stringsoflanguages.LookingForFreight : Stringsoflanguages.LoadedAndOnRoad}
+          </Text>
         </TouchableOpacity>
       </Animated.View>
     );
@@ -73,7 +95,7 @@ ActionButtonItem.propTypes = {
 };
 
 ActionButtonItem.defaultProps = {
-  onPress: () => {},
+  onPress: () => { },
   startDegree: 0,
   endDegree: 720
 };
@@ -93,5 +115,6 @@ const styles = StyleSheet.create({
     shadowRadius: 1,
     backgroundColor: 'red',
     position: 'absolute',
+
   },
 });
